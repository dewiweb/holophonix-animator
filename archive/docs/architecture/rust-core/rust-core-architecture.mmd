---
title: Rust Core Architecture
---
%%{init: {'theme': 'dark', 'themeVariables': { 'darkMode': true }}}%%
flowchart TB
    %% Rust Core Architecture
    subgraph RustCore["Rust Core"]
        subgraph NodeBridge["Node.js Bridge"]
            NAPI["N-API/Node-API"]
            ZeroCopy["Zero-copy Buffer"]
            AsyncOps["Async Operations"]
            TypeConversion["Type System"]
            MemManager["Memory Manager"]
            EventSystem["Event System"]
            
            NAPI --> ZeroCopy
            NAPI --> AsyncOps
            AsyncOps --> TypeConversion
            TypeConversion --> MemManager
            MemManager --> EventSystem
        end

        subgraph OSCLayer["OSC Communication"]
            OSCServer["Server Socket"]
            IncomingHandler["Message Handler"]
            ServerValidator["Message Validator"]
            StateUpdater["State Updater"]
            ErrorHandler["Error Handler"]
            OSCClient["Client Socket"]
            RetryManager["Retry Manager"]
            MessageQueue["Message Queue"]
            Protocol["Protocol Handler"]
            
            OSCServer --> IncomingHandler
            IncomingHandler --> ServerValidator
            ServerValidator --> Protocol
            Protocol --> StateUpdater
            OSCClient --> RetryManager
            RetryManager --> MessageQueue
            MessageQueue --> Protocol
        end

        subgraph StateManagement["State Management"]
            StateStore["Central Store"]
            StateSync["State Sync"]
            GroupState["Group State"]
            FormationState["Formation State"]
            
            StateStore --> StateSync
            StateStore --> GroupState
            GroupState --> FormationState
        end

        subgraph AnimationEngine["Animation Engine"]
            AnimManager["Animation Manager"]
            GroupManager["Group System"]
            AnimModels["Animation Models"]
            InterpolationSystem["Interpolation"]
            CycleManager["Animation Cycle"]
            
            AnimManager --> GroupManager
            GroupManager --> AnimModels
            AnimModels --> InterpolationSystem
            InterpolationSystem --> CycleManager
        end

        subgraph ComputationEngine["Computation Engine"]
            VectorOps["Vector Operations"]
            Optimization["Optimization"]
            GroupCalc["Group Calculations"]
            
            VectorOps --> Optimization
            Optimization --> GroupCalc
        end

        %% Inter-module Communication
        NodeBridge <--> StateManagement
        NodeBridge <--> AnimationEngine
        Protocol --> StateManagement
        StateManagement --> AnimationEngine
        AnimationEngine --> ComputationEngine
        StateManagement --> OSCClient
        AnimationEngine --> OSCClient
        ComputationEngine --> AnimationEngine
    end

    %% External Connections
    ElectronMain["Electron Main"] <--> NodeBridge
    Holophonix["Holophonix"] <--> OSCLayer
    
    %% Control Apps
    subgraph ExternalApps["External Control Apps"]
        TouchOSC["TouchOSC"]
        MaxMSP["Max/MSP"]
        PureData["Pure Data"]
    end
    
    ExternalApps --> OSCLayer

    %% Styling
    classDef default fill:#2C3E50,stroke:#41B883,color:#fff
    classDef external fill:#1E1E1E,stroke:#41B883,color:#fff
    classDef module fill:#2C3E50,stroke:#41B883,color:#fff,stroke-width:2px
    
    class Holophonix,ElectronMain,TouchOSC,MaxMSP,PureData external
    class NodeBridge,OSCLayer,StateManagement,AnimationEngine,ComputationEngine module
